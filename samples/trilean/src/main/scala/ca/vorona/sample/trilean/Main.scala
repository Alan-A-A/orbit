package ca.vorona.sample.trilean

/**
 * This is just a proof of concent that Orbit can work with Scala.
 * 
 * The biggest obsticle is its use of javax.annotation.processing.AbstractProcessor, which is not (and should not ever be) supported by Scala.
 * 
 * It should be fun to write a Scala macros to do the same ;)
 */

import com.ea.orbit.actors.IActor
import com.ea.orbit.concurrent.Task
import com.ea.orbit.actors.runtime.OrbitActor
import com.ea.orbit.actors.OrbitStage
// Only needed until we have macros
import com.ea.orbit.actors.runtime.ActorFactory
import com.ea.orbit.actors.runtime.ActorReference
import com.ea.orbit.actors.runtime.ActorInvoker
import com.ea.orbit.exception.MethodNotFoundException

object Main {

  val CLUSTER_NAME = "trilean"

  def main(args: Array[String]): Unit = {
    val stage1 = initStage(CLUSTER_NAME, "stage1")
    val stage2 = initStage(CLUSTER_NAME, "stage2")

    val helloFrom1 = stage1.getReference(classOf[IHello], "0")
    val helloFrom2 = stage2.getReference(classOf[IHello], "0")

    println(helloFrom1.sayHello("Hi from 01").get())
    println(helloFrom2.sayHello("Hi from 02").get())

  }

  def initStage(clusterId: String, stageId: String) = {
    val stage = new OrbitStage()
    stage.setClusterName(clusterId);
    stage.start().join();
    stage
  }

}

trait IHello extends IActor {
  def sayHello(greeting: String): Task[String]
}

class HelloActor extends OrbitActor[AnyRef] with IHello {

  def sayHello(greeting: String): Task[String] = {
    getLogger().info("Here: " + greeting)
    Task.fromValue("You said: '" + greeting + "', I say: Hello from " + System.identityHashCode(this) + " !");
  }

}

/* Those should be auto-generated by macros...
 * Will be a lot of fun with those numberic ids :) 
 * Plus those extra-helpful META-INF files, what's wrong with autodiscovery by annotation?
 */
object HelloFactory {
  val INTERFACE_ID = 541269231
  val SAY_HELLO = 2057169117

  class HelloReference(_id: String) extends ActorReference[IHello](_id) with IHello {
    protected def _interfaceId() = INTERFACE_ID
    def _interfaceClass() = classOf[IHello]
    def sayHello(greeting: String) = invoke(false, SAY_HELLO, Array(greeting));
  }

  class HelloInvoker extends ActorInvoker[IHello] {
    def _interfaceId() = INTERFACE_ID

    override def invoke(target: IHello, methodId: Int, params: Array[AnyRef]) = methodId match {
      case SAY_HELLO => target.sayHello(params(0).asInstanceOf[String])
      case _         => throw new MethodNotFoundException("MethodId :" + methodId)
    }

  }
}

class HelloFactory extends ActorFactory[IHello] {
  import HelloFactory._
  def getInterface(): Class[_] = classOf[IHello]
  def getInterfaceId(): Int = INTERFACE_ID
  def createReference(id: String): IHello = new HelloReference(id)
  def getInvoker() = new HelloInvoker

}

